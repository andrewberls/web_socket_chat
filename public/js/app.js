// Generated by CoffeeScript 1.3.3
var SocketWrapper;

SocketWrapper = Backbone.Model.extend({
  defaults: {
    connected: false,
    count: 0
  },
  connect: function() {
    var url,
      _this = this;
    if (window.socket && socket.readyState === 1) {
      return;
    }
    url = "ws://" + (this.get('host')) + ":" + (this.get('port'));
    console.log("Connecting to " + url);
    window.socket = new WebSocket(url);
    this.set({
      connected: true
    });
    socket.onmessage = function(msg) {
      var response;
      try {
        response = JSON.parse(msg.data);
      } catch (ex) {
        _this.trigger('socket:parse_error', "Could not parse socket msg: " + msg.data);
      }
      if (response.type === 'Connect') {
        console.log("Connection received");
        return _this.trigger('socket:connect', response['count']);
      } else {
        return _this.trigger('socket:message', response['data']);
      }
    };
    socket.onerror = function(evt) {
      this.set({
        connected: false
      });
      return this.trigger('socket:error');
    };
    return socket.onclose = function(evt) {
      return _this.set({
        connected: false
      });
    };
  },
  disconnect: function() {
    if (window.socket && window.socket.readyState === 1) {
      console.log("Disconnecting");
      return window.socket.close();
    }
  }
});

// Generated by CoffeeScript 1.3.3
var ConnectionView;

ConnectionView = Backbone.View.extend({
  template: _.template($("#template-socket-connection").html()),
  events: {
    'click .btn-primary': 'connect',
    'click .btn-danger': 'disconnect'
  },
  initialize: function() {
    console.log("Socket view initialized. Attempting connection...");
    this.model.on('change:connected', this.render, this);
    this.model.on('socket:connect', function(count) {
      this.model.set({
        count: count
      });
      return this.render();
    }, this);
    return this.model.connect();
  },
  render: function() {
    $(this.el).html(this.template(this.model.toJSON()));
    return this;
  },
  connect: function() {
    return this.model.connect();
  },
  disconnect: function() {
    return this.model.disconnect();
  }
});

// Generated by CoffeeScript 1.3.3
var MessageListView, MessageView,
  __hasProp = {}.hasOwnProperty;

MessageView = Backbone.View.extend({
  template: _.template($('#template-socket-message').html()),
  render: function() {
    $(this.el).html(this.template(this.model));
    return this;
  }
});

MessageListView = Backbone.View.extend({
  template: _.template($('#template-socket-message-list').html()),
  initialize: function() {
    this.model.on('socket:message', this.onMessage, this);
    this.data = [];
    return this.loadMessages();
  },
  loadMessages: function() {
    var _this = this;
    $(this.el).html('');
    return $.ajax({
      url: "/messages.json",
      success: function(json) {
        var id, msg, text, _i, _len, _ref, _results;
        _ref = JSON.parse(json);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          msg = _ref[_i];
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (id in msg) {
              if (!__hasProp.call(msg, id)) continue;
              text = msg[id];
              _results1.push($(this.el).append("              <div class='message'>                <p>" + text + "</p>              </div>            "));
            }
            return _results1;
          }).call(_this));
        }
        return _results;
      }
    });
  },
  onMessage: function(msg) {
    this.data.push({
      message: msg
    });
    return this.render();
  },
  render: function() {
    this.loadMessages();
    return this;
  }
});

// Generated by CoffeeScript 1.3.3
var sendIfEnter, setup;

sendIfEnter = function(textarea, evt) {
  if (window.socket && evt.keyCode === 13) {
    window.socket.send($(textarea).val());
    return $(textarea).val('');
  }
};

setup = function() {
  var connection_view, socket_messages_list_view, socket_wrapper;
  if (WebSocket) {
    $('.if-web-sockets').show();
  } else {
    $('.no-web-sockets').show();
  }
  socket_wrapper = new SocketWrapper({
    host: 'localhost',
    port: 8080
  });
  connection_view = new ConnectionView({
    model: socket_wrapper
  });
  $('#connect').append(connection_view.$el);
  socket_messages_list_view = new MessageListView({
    model: socket_wrapper
  });
  return $('#messages').append(socket_messages_list_view.$el);
};

$(function() {
  setup();
  return $("#message-input").keyup(function(event) {
    return sendIfEnter(this, event);
  });
});

$(window).unload(function() {
  return window.socket.close();
});
